/* tslint:disable */
/* eslint-disable */
/**
 * MareshkiFinance Service - User model
 * This is a Template YAML For mareshkifinance
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  TokenResponse,
  UploadUserAvatar200Response,
  UserLogin,
  UserProfileResponse,
  UserProfileUpdate,
  UserRegistration,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    TokenResponseFromJSON,
    TokenResponseToJSON,
    UploadUserAvatar200ResponseFromJSON,
    UploadUserAvatar200ResponseToJSON,
    UserLoginFromJSON,
    UserLoginToJSON,
    UserProfileResponseFromJSON,
    UserProfileResponseToJSON,
    UserProfileUpdateFromJSON,
    UserProfileUpdateToJSON,
    UserRegistrationFromJSON,
    UserRegistrationToJSON,
} from '../models/index';

export interface GetUserProfileRequest {
    userId: number;
}

export interface LoginRequest {
    userLogin: UserLogin;
}

export interface RegisterRequest {
    userRegistration: UserRegistration;
}

export interface UpdateUserProfileRequest {
    userId: number;
    userProfileUpdate: UserProfileUpdate;
}

export interface UploadUserAvatarRequest {
    userId: number;
    avatar?: Blob;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Retrieves the profile information of a user by their unique ID
     * Get user profile information
     */
    async getUserProfileRaw(requestParameters: GetUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserProfileResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUserProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileResponseFromJSON(jsonValue));
    }

    /**
     * Retrieves the profile information of a user by their unique ID
     * Get user profile information
     */
    async getUserProfile(requestParameters: GetUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserProfileResponse> {
        const response = await this.getUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This is a method for user login
     * This is a user login method
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponse>> {
        if (requestParameters.userLogin === null || requestParameters.userLogin === undefined) {
            throw new runtime.RequiredError('userLogin','Required parameter requestParameters.userLogin was null or undefined when calling login.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/users/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserLoginToJSON(requestParameters.userLogin),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseFromJSON(jsonValue));
    }

    /**
     * This is a method for user login
     * This is a user login method
     */
    async login(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponse> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This is a method for user registration
     * This is a user registration method
     */
    async registerRaw(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenResponse>> {
        if (requestParameters.userRegistration === null || requestParameters.userRegistration === undefined) {
            throw new runtime.RequiredError('userRegistration','Required parameter requestParameters.userRegistration was null or undefined when calling register.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/users/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserRegistrationToJSON(requestParameters.userRegistration),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenResponseFromJSON(jsonValue));
    }

    /**
     * This is a method for user registration
     * This is a user registration method
     */
    async register(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenResponse> {
        const response = await this.registerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows a user to update their profile information
     * Update user profile
     */
    async updateUserProfileRaw(requestParameters: UpdateUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserProfileResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateUserProfile.');
        }

        if (requestParameters.userProfileUpdate === null || requestParameters.userProfileUpdate === undefined) {
            throw new runtime.RequiredError('userProfileUpdate','Required parameter requestParameters.userProfileUpdate was null or undefined when calling updateUserProfile.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserProfileUpdateToJSON(requestParameters.userProfileUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileResponseFromJSON(jsonValue));
    }

    /**
     * Allows a user to update their profile information
     * Update user profile
     */
    async updateUserProfile(requestParameters: UpdateUserProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserProfileResponse> {
        const response = await this.updateUserProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Allows a user to upload an avatar image
     * Upload user avatar
     */
    async uploadUserAvatarRaw(requestParameters: UploadUserAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadUserAvatar200Response>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling uploadUserAvatar.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.avatar !== undefined) {
            formParams.append('avatar', requestParameters.avatar as any);
        }

        const response = await this.request({
            path: `/api/users/{userId}/avatar`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadUserAvatar200ResponseFromJSON(jsonValue));
    }

    /**
     * Allows a user to upload an avatar image
     * Upload user avatar
     */
    async uploadUserAvatar(requestParameters: UploadUserAvatarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadUserAvatar200Response> {
        const response = await this.uploadUserAvatarRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
